//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HA.Workflow.Services.Controls.Navigation
{
    using System;
    using System.ComponentModel;
    using System.Workflow.Activities;
    using System.Workflow.ComponentModel;
    using System.Workflow.ComponentModel.Design;
    using System.Workflow.ComponentModel.Compiler;
    using HA.Workflow.Services.Interfaces;


    [ToolboxItemAttribute(typeof(ActivityToolboxItem))]
    public partial class CallHostMethod : CallExternalMethodActivity
    {

        public static DependencyProperty ArgsProperty = DependencyProperty.Register("Args", typeof(StateBehaveArgs), typeof(CallHostMethod));

        public CallHostMethod()
        {
            base.InterfaceType = typeof(IStateBehaveCondition);
            base.MethodName = "CallHostMethod";
        }

        [BrowsableAttribute(false)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        public override System.Type InterfaceType
        {
            get
            {
                return base.InterfaceType;
            }
            set
            {
                throw new InvalidOperationException("Cannot set InterfaceType on a derived CallExternalMethodActivity.");
            }
        }

        [BrowsableAttribute(false)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        public override string MethodName
        {
            get
            {
                return base.MethodName;
            }
            set
            {
                throw new InvalidOperationException("Cannot set MethodName on a derived CallExternalMethodActivity.");
            }
        }

        [ValidationOptionAttribute(ValidationOption.Required)]
        public StateBehaveArgs Args
        {
            get
            {
                return ((StateBehaveArgs)(this.GetValue(CallHostMethod.ArgsProperty)));
            }
            set
            {
                this.SetValue(CallHostMethod.ArgsProperty, value);
            }
        }

        protected override void OnMethodInvoking(System.EventArgs e)
        {
            this.ParameterBindings["Args"].Value = this.Args;
        }
    }
}
